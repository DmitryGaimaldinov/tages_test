import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:tages_test/repository/banknote_repository.dart';

import 'dart:math' as math;

import 'package:tages_test/bloc/home_state.dart';

// –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –±—ã–ª –≤–∑—è—Ç Cubit –≤–º–µ—Å—Ç–æ Bloc'–∞
class HomeBloc extends Cubit<HomeState> {

  final BanknoteRepository _banknoteRepository;

  HomeBloc({ required BanknoteRepository banknoteRepository}) :
        _banknoteRepository = banknoteRepository,
        super(HomeStateInitializing()) {
    _init();
  }

  Future<void> _init() async {
    final limits = await _banknoteRepository.getLimits();
    emit(HomeStateLoaded(limits: limits));
  }

  Future<void> withdrawMoney(int amount) async {
    if (state is HomeStateLoaded) {
      final state = this.state as HomeStateLoaded;

      // –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ 100, —Ç.–∫. 100 - –º–µ–Ω—å—à–∞—è –∫—É–ø—é—Ä–∞
      if (amount % 100 != 0) {
        emit(HomeStateLoaded(limits: state.limits, errorText: "–ë–∞–Ω–∫–æ–º–∞—Ç –Ω–µ –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—É—é —Å—É–º–º—É üò¢. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ 100"));
        return;
      }

      Map<int, int>? withdrawnBanknotes = _getWithdrawBanknotes(amount, state.limits);
      if (withdrawnBanknotes != null) {
        final newLimits = await _banknoteRepository.withdraw(withdrawnBanknotes);
        emit(HomeStateLoaded(limits: newLimits, withdrawnBanknotes: withdrawnBanknotes));
      } else {
        emit(HomeStateLoaded(limits: state.limits, errorText: "–ë–∞–Ω–∫–æ–º–∞—Ç –Ω–µ –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—É—é —Å—É–º–º—É üò¢"));
      }
    }
  }

  Future<void> refresh() async {
    final newLimits = await _banknoteRepository.refreshLimits();
    emit(HomeStateLoaded(limits: newLimits));
  }


  Map<int, int>? _getWithdrawBanknotes(int amount, Map<int, int> limits) {

    // –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–Ω—è—Ç—å,
    // –∏ —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –∫—É–ø—é—Ä–∞–º–∏ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º.
    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ —Å–Ω—è—Ç—ã–º–∏ –∫—É–ø—é—Ä–∞–º–∏ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    Map<int, int>? recursive(int amount, Map<int, int> banknotes) {
      if (amount == 0) return {}; // –í—Å—è —Å—É–º–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–∞
      if (banknotes.isEmpty) return null; // –ë–∞–Ω–∫–Ω–æ—Ç—ã –∫–æ–Ω—á–∏–ª–∏—Å—å, —Å—É–º–º—É –Ω–µ–ª—å–∑—è —Å–Ω—è—Ç—å

      // –°–∞–º–∞—è –±–æ–ª—å—à–∞—è –∫—É–ø—é—Ä–∞
      int banknote = banknotes.keys.first;

      // –ë–µ—Ä—ë–º –∏–∑ –±–∞–Ω–∫–æ–º–∞—Ç–∞ —Å—Ç–æ–ª—å–∫–æ –∫—É–ø—é—Ä, —Å–∫–æ–ª—å–∫–æ –º–æ–∂–µ–º,
      // –Ω–æ —á—Ç–æ–±—ã –∏—Ö —Å—É–º–º–∞ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ amount
      int maxCount = math.min((amount / banknote).floor(), limits[banknote]!);

      // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫—É–ø—é—Ä–∞–º —Ç–∞–∫, —á—Ç–æ –±–µ—Ä—ë–º –∏—Ö —Å–Ω–∞—á–∞–ª–∞ –º–∞–∫—Å –∫–æ–ª-–≤–æ.
      // –ï—Å–ª–∏ —Å —Ç–∞–∫–∏–º –∫–æ–ª-–≤–æ–º –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å –±–∞–Ω–∫–æ–º–∞—Ç–∞,
      // —Ç–æ –±–µ—Ä—ë–º –Ω–∞ –æ–¥–Ω—É –∫—É–ø—é—Ä—É –º–µ–Ω—å—à–µ, –∏ —Ç–∞–∫ –ø–æ–∫–∞ –≤–æ–æ–±—â–µ –Ω–µ –≤–æ–∑—å–º—ë–º –∫—É–ø—é—Ä—É.
      for (int takeCount = maxCount; takeCount >= 0; takeCount--) {
        // –î–∞–ª—å—à–µ —É–∂–µ –±–µ—Ä—ë–º –¥—Ä—É–≥–∏–µ –∫—É–ø—é—Ä—ã
        Map<int, int>? result = recursive(amount - takeCount * banknote, banknotes..remove(banknote));


        if (result != null) {
          return (takeCount != 0)
              ? { banknote: takeCount, ...result} // –ï—Å–ª–∏ –±—Ä–∞–ª–∏ —Ç–µ–∫—É—â—É—é –∫—É–ø—é—Ä—É, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              : result;
        }
      }
      return null;
    }

    return recursive(
        amount,
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–Ω–∫–Ω–æ—Ç—ã –ø–æ —Ü–µ–Ω–Ω–æ—Å—Ç–∏. –°–Ω–∞—á–∞–ª–∞ –∫—Ä—É–ø–Ω—ã–µ
        Map.fromEntries(limits.entries.toList()..sort((b1, b2) => b2.key.compareTo(b1.key))));
  }
}
